using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Text;

namespace SheetReader
{
    public class BookDocumentSheet
    {
        private IDictionary<int, BookDocumentRow> _rows;
        private readonly IDictionary<int, BookDocumentColumn> _columns;

        public BookDocumentSheet(BookDocument book, Sheet sheet)
        {
            ArgumentNullException.ThrowIfNull(book);
            ArgumentNullException.ThrowIfNull(sheet);
            _rows = CreateRows();
            _columns = CreateColumns();
            if (_rows == null || _columns == null)
                throw new InvalidOperationException();

            Name = sheet.Name ?? string.Empty;
            IsHidden = !sheet.IsVisible;

            var e = new StateChangedEventArgs(StateChangedType.SheetAdded, this);
            book.OnStateChanged(this, e);
            if (e.Cancel)
                return;
        }

        public virtual void Load(BookDocument book, Sheet sheet)
        {
            ArgumentNullException.ThrowIfNull(book);
            ArgumentNullException.ThrowIfNull(sheet);

            StateChangedEventArgs e;
            foreach (var row in sheet.EnumerateRows())
            {
                var rowData = CreateRow(book, row);
                if (rowData == null)
                    continue;

                _rows[row.Index] = rowData;

                if (LastRowIndex == null || row.Index > LastRowIndex)
                {
                    LastRowIndex = row.Index;
                }

                if (FirstRowIndex == null || row.Index < FirstRowIndex)
                {
                    FirstRowIndex = row.Index;
                }

                e = new StateChangedEventArgs(StateChangedType.RowAdded, this, rowData);
                book.OnStateChanged(this, e);
                if (e.Cancel)
                    break;
            }

            foreach (var col in sheet.EnumerateColumns())
            {
                var column = CreateColumn(col);
                if (column == null)
                    continue;

                _columns[col.Index] = column;
                if (LastColumnIndex == null || col.Index > LastColumnIndex)
                {
                    LastColumnIndex = col.Index;
                }

                if (FirstColumnIndex == null || col.Index < FirstColumnIndex)
                {
                    FirstColumnIndex = col.Index;
                }

                e = new StateChangedEventArgs(StateChangedType.ColumnAddded, this, null, column);
                book.OnStateChanged(this, e);
                if (e.Cancel)
                    break;
            }
        }

        public virtual string Name { get; }
        public virtual bool IsHidden { get; }
        public int? FirstColumnIndex { get; protected set; }
        public int? LastColumnIndex { get; protected set; }
        public int? FirstRowIndex { get; protected set; }
        public int? LastRowIndex { get; protected set; }
        public IDictionary<int, BookDocumentRow> Rows => _rows;
        public IDictionary<int, BookDocumentColumn> Columns => _columns;
        public ListSortDirection? SortDirection { get; protected set; }
        public int? SortColumnIndex { get; protected set; }

        public override string ToString() => Name;

        public virtual bool EnsureColumn(BookDocument book, int columnIndex)
        {
            ArgumentNullException.ThrowIfNull(book);
            if (Columns.ContainsKey(columnIndex))
                return true;

            var column = CreateColumn(new Column { Index = columnIndex, Name = Row.GetExcelColumnName(columnIndex) });
            column.IsAutoGenerated = true;
            _columns[columnIndex] = column;
            if (!LastColumnIndex.HasValue || columnIndex > LastColumnIndex)
            {
                LastColumnIndex = columnIndex;
            }

            if (!FirstColumnIndex.HasValue || columnIndex < FirstColumnIndex)
            {
                FirstColumnIndex = columnIndex;
            }

            var e = new StateChangedEventArgs(StateChangedType.ColumnAddded, this, null, column);
            book.OnStateChanged(this, e);
            if (e.Cancel)
                return false;

            return true;
        }

        public virtual void UnsortRows()
        {
            if (!FirstRowIndex.HasValue || !LastRowIndex.HasValue)
                return;

            if (_rows.Count > 0)
            {
                var rows = new Dictionary<int, BookDocumentRow>();
                foreach (var kv in _rows)
                {
                    rows[kv.Value.RowIndex] = kv.Value;
                }
                _rows = rows;
            }

            SortColumnIndex = null;
            SortDirection = null;
        }

        public virtual void SortRows(int columnIndex, ListSortDirection direction, Comparison<BookDocumentCell?>? comparison = null)
        {
            if (!FirstRowIndex.HasValue || !LastRowIndex.HasValue)
                return;

            // determine sortable rows
            var rowCells = new List<(int rowIndex, BookDocumentCell? cell)>();
            var rowsNoCell = new List<(int rowIndex, BookDocumentRow row)>();
            foreach (var kv in _rows)
            {
                if (kv.Value.Cells.TryGetValue(columnIndex, out var cell) && cell.Value != null)
                {
                    rowCells.Add((kv.Key, cell));
                }
                else
                {
                    rowsNoCell.Add((kv.Key, kv.Value));
                }
            }

            if (rowCells.Count > 0)
            {
                rowCells.Sort((x, y) =>
                {
                    var cmp = Compare(x.cell, y.cell, comparison);
                    if (direction == ListSortDirection.Descending)
                        return cmp;

                    return -cmp;
                });


                var index = 0;
                var missingRows = Math.Max(0, FirstRowIndex.Value + 1 - rowsNoCell.Count - rowCells.Count);
                var rows = new Dictionary<int, BookDocumentRow>();
                var nullsFirst = direction == ListSortDirection.Descending;
                if (nullsFirst)
                {
                    index += missingRows;
                    foreach (var row in rowsNoCell.OrderBy(r => r.rowIndex))
                    {
                        rows[index] = row.row;
                        row.row.SortIndex = index++;
                    }
                }

                for (var i = 0; i < rowCells.Count; i++)
                {
                    var row = _rows[rowCells[i].rowIndex];
                    rows[index] = row;
                    row.SortIndex = index++;
                }

                if (!nullsFirst)
                {
                    foreach (var row in rowsNoCell.OrderBy(r => r.rowIndex))
                    {
                        rows[index] = row.row;
                        row.row.SortIndex = index++;
                    }
                }

                _rows = rows;
            }

            SortColumnIndex = columnIndex;
            SortDirection = direction;
        }

        protected virtual int Compare(BookDocumentCell? x, BookDocumentCell? y, Comparison<BookDocumentCell?>? comparison)
        {
            if (comparison != null)
                return comparison(x, y);

            var ix = x?.Value as IComparable;
            var iy = y?.Value as IComparable;
            if (IsNullForComparison(ix))
            {
                if (IsNullForComparison(iy))
                    return 0;

                return 1;
            }
            else if (IsNullForComparison(iy))
                return -1;

            var xt = ix!.GetType();
            var yt = iy!.GetType();
            if (xt.IsAssignableFrom(yt) || yt.IsAssignableFrom(xt))
                return ix.CompareTo(iy);

            try
            {
                return ix.CompareTo((IComparable)Convert.ChangeType(iy, xt));
            }
            catch
            {
                // continue
            }
            try
            {
                return iy.CompareTo((IComparable)Convert.ChangeType(ix, yt));
            }
            catch
            {
                // continue
            }
            return 0;
        }

        protected virtual bool IsNullForComparison(object? o) => o is null || Convert.IsDBNull(o);

        public BookDocumentCell? GetCell(RowCol? rowCol)
        {
            if (rowCol == null)
                return null;

            return GetCell(rowCol.RowIndex, rowCol.ColumnIndex);
        }

        public virtual BookDocumentCell? GetCell(int rowIndex, int columnIndex)
        {
            if (!_rows.TryGetValue(rowIndex, out var row))
                return null;

            row.Cells.TryGetValue(columnIndex, out var cell);
            return cell;
        }

        public virtual bool SwapColumns(int columnIndex1, int columnIndex2)
        {
            if (columnIndex1 == columnIndex2)
                return false;

            if (!FirstColumnIndex.HasValue || !LastColumnIndex.HasValue)
                return false;

            // swap columns
            if (!Columns.Remove(columnIndex1, out var col1))
                return false;

            if (!Columns.Remove(columnIndex2, out var col2))
                return false;

            Columns.Add(columnIndex1, col2);
            Columns.Add(columnIndex2, col1);

            // recompute columns indices
            var indices = new int[LastColumnIndex.Value - FirstColumnIndex.Value + 1];
            var idx = 0;
            if (columnIndex1 > columnIndex2)
            {
                for (var i = FirstColumnIndex.Value; i <= LastColumnIndex.Value; i++)
                {
                    if (i == columnIndex1)
                    {
                        // skip
                        continue;
                    }

                    if (i == columnIndex2)
                    {
                        // insert
                        indices[idx++] = columnIndex1;
                        if (idx == indices.Length)
                            break;
                    }

                    indices[idx++] = i;
                    if (idx == indices.Length)
                        break;
                }
            }
            else
            {
                for (var i = FirstColumnIndex.Value; i <= LastColumnIndex.Value; i++)
                {
                    if (i == columnIndex1)
                    {
                        // skip
                        continue;
                    }

                    indices[idx++] = i;
                    if (idx == indices.Length)
                        break;

                    if (i == columnIndex2)
                    {
                        indices[idx++] = columnIndex1;
                        if (idx == indices.Length)
                            break;
                    }
                }
            }

            // rebuild all rows cells in new order
            foreach (var kv in Rows)
            {
                var cells = kv.Value.CreateCells();
                var idx2 = 0;
                foreach (var i in indices)
                {
                    if (kv.Value.Cells.TryGetValue(i, out var cell))
                    {
                        cells[idx2] = cell;
                    }
                    idx2++;
                }

                kv.Value.ReplaceCells(cells);
            }
            return true;
        }

        public virtual string? FormatValue(object? value)
        {
            if (value is null)
                return null;

            if (value is string s)
                return s;

            if (value is IDictionary dictionary)
            {
                var sb = new StringBuilder("{");
                var first = true;
                foreach (DictionaryEntry kv in dictionary)
                {
                    if (first)
                    {
                        first = !first;
                    }
                    else
                    {
                        sb.Append(", ");
                    }

                    sb.Append(kv.Key);
                    sb.Append('=');
                    sb.Append(FormatValue(kv.Value));
                }
                sb.Append('}');
                return sb.ToString();
            }

            if (value is Array array && array.Rank == 1)
            {
                var sb = new StringBuilder("[");
                var first = true;
                for (var i = 0; i < array.Length; i++)
                {
                    if (first)
                    {
                        first = !first;
                    }
                    else
                    {
                        sb.Append(", ");
                    }

                    sb.Append(FormatValue(array.GetValue(i)));
                }
                sb.Append(']');
                return sb.ToString();
            }

            return string.Format(CultureInfo.CurrentCulture, "{0}", value);
        }

        protected virtual BookDocumentRow CreateRow(BookDocument book, Row row) => new(book, this, row);
        protected virtual BookDocumentColumn CreateColumn(Column column) => new(column);
        protected virtual IDictionary<int, BookDocumentColumn> CreateColumns() => new Dictionary<int, BookDocumentColumn>();
        protected virtual IDictionary<int, BookDocumentRow> CreateRows() => new Dictionary<int, BookDocumentRow>();
    }
}
